package cmd

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"github.com/badtuxx/girus-cli/internal/helpers"
	"github.com/badtuxx/girus-cli/internal/k8s"
	"github.com/badtuxx/girus-cli/internal/lab"
	"github.com/badtuxx/girus-cli/internal/templates"
	"github.com/schollz/progressbar/v3"
	"github.com/spf13/cobra"
)

var (
	deployFile      string
	clusterName     string
	verboseMode     bool
	labFile         string
	skipPortForward bool
	skipBrowser     bool
)

var createCmd = &cobra.Command{
	Use:   "create [subcommand]",
	Short: "Comandos para criar recursos",
	Run: func(cmd *cobra.Command, args []string) {
		cmd.Help()
	},
}

var createClusterCmd = &cobra.Command{
	Use:   "cluster",
	Short: "Cria o cluster Girus",
	Long: `Cria um cluster Kind com o nome "girus" e implanta todos os componentes necess√°rios.
Por padr√£o, o deployment embutido no bin√°rio √© utilizado.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Verificar se o Docker est√° instalado e funcionando
		fmt.Println("üîÑ Verificando pr√©-requisitos...")
		dockerCmd := exec.Command("docker", "--version")
		if err := dockerCmd.Run(); err != nil {
			fmt.Println("‚ùå Docker n√£o encontrado ou n√£o est√° em execu√ß√£o")
			fmt.Println("\nO Docker √© necess√°rio para criar um cluster Kind. Instru√ß√µes de instala√ß√£o:")

			// Detectar o sistema operacional para instru√ß√µes espec√≠ficas
			if runtime.GOOS == "darwin" {
				// macOS
				fmt.Println("\nüì¶ Para macOS, recomendamos usar Colima (alternativa leve ao Docker Desktop):")
				fmt.Println("1. Instale o Homebrew caso n√£o tenha:")
				fmt.Println("   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"")
				fmt.Println("2. Instale o Colima e o Docker CLI:")
				fmt.Println("   brew install colima docker")
				fmt.Println("3. Inicie o Colima:")
				fmt.Println("   colima start")
				fmt.Println("\nAlternativamente, voc√™ pode instalar o Docker Desktop para macOS de:")
				fmt.Println("https://www.docker.com/products/docker-desktop")
			} else if runtime.GOOS == "linux" {
				// Linux
				fmt.Println("\nüì¶ Para Linux, use o script de instala√ß√£o oficial:")
				fmt.Println("   curl -fsSL https://get.docker.com | bash")
				fmt.Println("\nAp√≥s a instala√ß√£o, adicione seu usu√°rio ao grupo docker para evitar usar sudo:")
				fmt.Println("   sudo usermod -aG docker $USER")
				fmt.Println("   newgrp docker")
				fmt.Println("\nE inicie o servi√ßo:")
				fmt.Println("   sudo systemctl enable docker")
				fmt.Println("   sudo systemctl start docker")
			} else {
				// Windows ou outros sistemas
				fmt.Println("\nüì¶ Visite https://www.docker.com/products/docker-desktop para instru√ß√µes de instala√ß√£o para seu sistema operacional")
			}

			fmt.Println("\nAp√≥s instalar o Docker, execute novamente este comando.")
			os.Exit(1)
		}

		// Verificar se o servi√ßo Docker est√° rodando
		dockerInfoCmd := exec.Command("docker", "info")
		if err := dockerInfoCmd.Run(); err != nil {
			fmt.Println("‚ùå O servi√ßo Docker n√£o est√° em execu√ß√£o")

			if runtime.GOOS == "darwin" {
				fmt.Println("\nPara macOS com Colima:")
				fmt.Println("   colima start")
				fmt.Println("\nPara Docker Desktop:")
				fmt.Println("   Inicie o aplicativo Docker Desktop")
			} else if runtime.GOOS == "linux" {
				fmt.Println("\nInicie o servi√ßo Docker:")
				fmt.Println("   sudo systemctl start docker")
			} else {
				fmt.Println("\nInicie o Docker Desktop ou o servi√ßo Docker apropriado para seu sistema.")
			}

			fmt.Println("\nAp√≥s iniciar o Docker, execute novamente este comando.")
			os.Exit(1)
		}

		fmt.Println("‚úÖ Docker detectado e funcionando")

		// Verificar silenciosamente se o cluster j√° existe
		checkCmd := exec.Command("kind", "get", "clusters")
		output, err := checkCmd.Output()

		// Ignorar erros na checagem, apenas assumimos que n√£o h√° clusters
		if err == nil {
			clusters := strings.Split(strings.TrimSpace(string(output)), "\n")

			// Verificar se o cluster "girus" j√° existe
			clusterExists := false
			for _, cluster := range clusters {
				if cluster == clusterName {
					clusterExists = true
					break
				}
			}

			if clusterExists {
				fmt.Printf("‚ö†Ô∏è  Cluster Girus j√° existe.\n")
				fmt.Print("Deseja substitu√≠-lo? [s/N]: ")

				reader := bufio.NewReader(os.Stdin)
				response, _ := reader.ReadString('\n')
				response = strings.ToLower(strings.TrimSpace(response))

				if response != "s" && response != "sim" && response != "y" && response != "yes" {
					fmt.Println("Opera√ß√£o cancelada.")
					return
				}

				// Excluir o cluster existente
				fmt.Printf("Excluindo cluster Girus existente...\n")

				deleteCmd := exec.Command("kind", "delete", "cluster", "--name", clusterName)
				if verboseMode {
					deleteCmd.Stdout = os.Stdout
					deleteCmd.Stderr = os.Stderr
					if err := deleteCmd.Run(); err != nil {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao excluir o cluster existente: %v\n", err)
						fmt.Println("   Por favor, exclua manualmente com 'kind delete cluster --name girus' e tente novamente.")
						os.Exit(1)
					}
				} else {
					// Usar barra de progresso
					bar := progressbar.NewOptions(100,
						progressbar.OptionSetDescription("Excluindo cluster existente..."),
						progressbar.OptionSetWidth(80),
						progressbar.OptionShowBytes(false),
						progressbar.OptionSetPredictTime(false),
						progressbar.OptionThrottle(65*time.Millisecond),
						progressbar.OptionSetRenderBlankState(true),
						progressbar.OptionSpinnerType(14),
						progressbar.OptionFullWidth(),
					)

					var stderr bytes.Buffer
					deleteCmd.Stderr = &stderr

					// Iniciar o comando
					err := deleteCmd.Start()
					if err != nil {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar exclus√£o: %v\n", err)
						os.Exit(1)
					}

					// Atualizar a barra de progresso
					done := make(chan struct{})
					go func() {
						for {
							select {
							case <-done:
								return
							default:
								bar.Add(1)
								time.Sleep(100 * time.Millisecond)
							}
						}
					}()

					// Aguardar o final do comando
					err = deleteCmd.Wait()
					close(done)
					bar.Finish()

					if err != nil {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao excluir o cluster existente: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderr.String())
						fmt.Println("   Por favor, exclua manualmente com 'kind delete cluster --name girus' e tente novamente.")
						os.Exit(1)
					}
				}

				fmt.Println("‚úÖ Cluster existente exclu√≠do com sucesso.")
			}
		}

		// Criar o cluster Kind
		fmt.Println("üîÑ Criando cluster Girus...")

		if verboseMode {
			// Executar normalmente mostrando o output
			createClusterCmd := exec.Command("kind", "create", "cluster", "--name", clusterName)
			createClusterCmd.Stdout = os.Stdout
			createClusterCmd.Stderr = os.Stderr

			if err := createClusterCmd.Run(); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar o cluster Girus: %v\n", err)
				fmt.Println("   Poss√≠veis causas:")
				fmt.Println("   ‚Ä¢ Docker n√£o est√° em execu√ß√£o")
				fmt.Println("   ‚Ä¢ Permiss√µes insuficientes")
				fmt.Println("   ‚Ä¢ Conflito com cluster existente")
				os.Exit(1)
			}
		} else {
			// Usando barra de progresso (padr√£o)
			bar := progressbar.NewOptions(100,
				progressbar.OptionSetDescription("Criando cluster..."),
				progressbar.OptionSetWidth(80),
				progressbar.OptionShowBytes(false),
				progressbar.OptionSetPredictTime(false),
				progressbar.OptionThrottle(65*time.Millisecond),
				progressbar.OptionSetRenderBlankState(true),
				progressbar.OptionSpinnerType(14),
				progressbar.OptionFullWidth(),
			)

			// Executar comando sem mostrar sa√≠da
			createClusterCmd := exec.Command("kind", "create", "cluster", "--name", clusterName)
			var stderr bytes.Buffer
			createClusterCmd.Stderr = &stderr

			// Iniciar o comando
			err := createClusterCmd.Start()
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar o comando: %v\n", err)
				os.Exit(1)
			}

			// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
			done := make(chan struct{})
			go func() {
				for {
					select {
					case <-done:
						return
					default:
						bar.Add(1)
						time.Sleep(200 * time.Millisecond)
					}
				}
			}()

			// Aguardar o final do comando
			err = createClusterCmd.Wait()
			close(done)
			bar.Finish()

			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar o cluster Girus: %v\n", err)

				// Traduzir mensagens de erro comuns
				errMsg := stderr.String()

				if strings.Contains(errMsg, "node(s) already exist for a cluster with the name") {
					fmt.Println("   Erro: J√° existe um cluster com o nome 'girus' no sistema.")
					fmt.Println("   Por favor, exclua-o primeiro com 'kind delete cluster --name girus'")
				} else if strings.Contains(errMsg, "permission denied") {
					fmt.Println("   Erro: Permiss√£o negada. Verifique as permiss√µes do Docker.")
				} else if strings.Contains(errMsg, "Cannot connect to the Docker daemon") {
					fmt.Println("   Erro: N√£o foi poss√≠vel conectar ao servi√ßo Docker.")
					fmt.Println("   Verifique se o Docker est√° em execu√ß√£o com 'systemctl status docker'")
				} else {
					fmt.Println("   Detalhes t√©cnicos:", errMsg)
				}

				os.Exit(1)
			}
		}

		fmt.Println("‚úÖ Cluster Girus criado com sucesso!")

		// Aplicar o manifesto de deployment do Girus
		fmt.Println("\nüì¶ Implantando o Girus no cluster...")

		// Verificar se existe o arquivo girus-kind-deploy.yaml
		deployYamlPath := "girus-kind-deploy.yaml"
		foundDeployFile := false

		// Verificar em diferentes locais poss√≠veis
		possiblePaths := []string{
			deployYamlPath,                      // No diret√≥rio atual
			filepath.Join("..", deployYamlPath), // Um n√≠vel acima
			filepath.Join(os.Getenv("HOME"), "REPOS", "strigus", deployYamlPath), // Caminho comum
		}

		for _, path := range possiblePaths {
			if _, err := os.Stat(path); err == nil {
				deployFile = path
				foundDeployFile = true
				break
			}
		}

		if foundDeployFile {
			fmt.Printf("üîç Usando arquivo de deployment: %s\n", deployFile)

			// Aplicar arquivo de deployment completo (j√° cont√©m o template do lab)
			if verboseMode {
				// Executar normalmente mostrando o output
				applyCmd := exec.Command("kubectl", "apply", "-f", deployFile)
				applyCmd.Stdout = os.Stdout
				applyCmd.Stderr = os.Stderr

				if err := applyCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					os.Exit(1)
				}
			} else {
				// Usar barra de progresso
				bar := progressbar.NewOptions(100,
					progressbar.OptionSetDescription("Implantando Girus..."),
					progressbar.OptionSetWidth(80),
					progressbar.OptionShowBytes(false),
					progressbar.OptionSetPredictTime(false),
					progressbar.OptionThrottle(65*time.Millisecond),
					progressbar.OptionSetRenderBlankState(true),
					progressbar.OptionSpinnerType(14),
					progressbar.OptionFullWidth(),
				)

				// Executar comando sem mostrar sa√≠da
				applyCmd := exec.Command("kubectl", "apply", "-f", deployFile)
				var stderr bytes.Buffer
				applyCmd.Stderr = &stderr

				// Iniciar o comando
				err := applyCmd.Start()
				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar o comando: %v\n", err)
					os.Exit(1)
				}

				// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
				done := make(chan struct{})
				go func() {
					for {
						select {
						case <-done:
							return
						default:
							bar.Add(1)
							time.Sleep(100 * time.Millisecond)
						}
					}
				}()

				// Aguardar o final do comando
				err = applyCmd.Wait()
				close(done)
				bar.Finish()

				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					fmt.Println("   Detalhes t√©cnicos:", stderr.String())
					os.Exit(1)
				}
			}

			fmt.Println("‚úÖ Infraestrutura e template de laborat√≥rio aplicados com sucesso!")
		} else {
			// Usar o deployment embutido como fallback
			// fmt.Println("‚ö†Ô∏è  Arquivo girus-kind-deploy.yaml n√£o encontrado, usando deployment embutido.")

			// Criar um arquivo tempor√°rio para o deployment principal
			tempFile, err := os.CreateTemp("", "girus-deploy-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio: %v\n", err)
				os.Exit(1)
			}
			defer os.Remove(tempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			defaultDeployment, err := templates.GetManifest("defaultDeployment.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}

			// Escrever o conte√∫do no arquivo tempor√°rio
			if _, err := tempFile.WriteString(string(defaultDeployment)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever no arquivo tempor√°rio: %v\n", err)
				os.Exit(1)
			}
			tempFile.Close()

			// Aplicar o deployment principal
			if verboseMode {
				// Executar normalmente mostrando o output
				applyCmd := exec.Command("kubectl", "apply", "-f", tempFile.Name())
				applyCmd.Stdout = os.Stdout
				applyCmd.Stderr = os.Stderr

				if err := applyCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					os.Exit(1)
				}
			} else {
				// Usar barra de progresso para o deploy (padr√£o)
				bar := progressbar.NewOptions(100,
					progressbar.OptionSetDescription("Implantando infraestrutura..."),
					progressbar.OptionSetWidth(80),
					progressbar.OptionShowBytes(false),
					progressbar.OptionSetPredictTime(false),
					progressbar.OptionThrottle(65*time.Millisecond),
					progressbar.OptionSetRenderBlankState(true),
					progressbar.OptionSpinnerType(14),
					progressbar.OptionFullWidth(),
				)

				// Executar comando sem mostrar sa√≠da
				applyCmd := exec.Command("kubectl", "apply", "-f", tempFile.Name())
				var stderr bytes.Buffer
				applyCmd.Stderr = &stderr

				// Iniciar o comando
				err := applyCmd.Start()
				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar o comando: %v\n", err)
					os.Exit(1)
				}

				// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
				done := make(chan struct{})
				go func() {
					for {
						select {
						case <-done:
							return
						default:
							bar.Add(1)
							time.Sleep(100 * time.Millisecond)
						}
					}
				}()

				// Aguardar o final do comando
				err = applyCmd.Wait()
				close(done)
				bar.Finish()

				if err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o manifesto do Girus: %v\n", err)
					fmt.Println("   Detalhes t√©cnicos:", stderr.String())
					os.Exit(1)
				}
			}

			fmt.Println("‚úÖ Infraestrutura b√°sica aplicada com sucesso!")

			// Agora vamos aplicar o template de laborat√≥rio que est√° embutido no bin√°rio
			fmt.Println("\nüî¨ Aplicando templates de laborat√≥rio...")

			// Criar um arquivo tempor√°rio para o template do laborat√≥rio Linux
			labTempFile, err := os.CreateTemp("", "basic-linux-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template Linux: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem os templates de laborat√≥rio.")
				return
			}
			defer os.Remove(labTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			basicLinuxTemplate, err := templates.GetManifest("linux.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}

			// Escrever o conte√∫do do template Linux no arquivo tempor√°rio
			if _, err := labTempFile.WriteString(string(basicLinuxTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template Linux no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem os templates de laborat√≥rio.")
				return
			}
			labTempFile.Close()

			// Criar um arquivo tempor√°rio para o template do laborat√≥rio Kubernetes
			k8sTempFile, err := os.CreateTemp("", "kubernetes-basics-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template Kubernetes: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Kubernetes.")
				return
			}
			defer os.Remove(k8sTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			basicKubernetesTemplate, err := templates.GetManifest("kubernetes.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}

			// Escrever o conte√∫do do template Kubernetes no arquivo tempor√°rio
			if _, err := k8sTempFile.WriteString(string(basicKubernetesTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template Kubernetes no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Kubernetes.")
				return
			}
			k8sTempFile.Close()

			// Criar um arquivo tempor√°rio para o template do laborat√≥rio Docker
			dockerTempFile, err := os.CreateTemp("", "docker-basics-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template Docker: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Docker.")
				return
			}
			defer os.Remove(dockerTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			basicDockerTemplate, err := templates.GetManifest("docker.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}
			// Escrever o conte√∫do do template Docker no arquivo tempor√°rio
			if _, err := dockerTempFile.WriteString(string(basicDockerTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template Docker no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Docker.")
				return
			}
			dockerTempFile.Close()

			// Criar um arquivo tempor√°rio para o template de Administra√ß√£o de Usu√°rios Linux
			linuxUsersTempFile, err := os.CreateTemp("", "linux-users-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template de Usu√°rios Linux: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Usu√°rios Linux.")
				return
			}
			defer os.Remove(linuxUsersTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			linuxUsersTemplate, err := templates.GetManifest("linux-users.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}
			// Escrever o conte√∫do do template de Usu√°rios Linux no arquivo tempor√°rio
			if _, err := linuxUsersTempFile.WriteString(string(linuxUsersTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template de Usu√°rios Linux no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Usu√°rios Linux.")
				return
			}
			linuxUsersTempFile.Close()

			// Criar um arquivo tempor√°rio para o template de Permiss√µes de Arquivos Linux
			linuxPermsTempFile, err := os.CreateTemp("", "linux-perms-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template de Permiss√µes Linux: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Permiss√µes Linux.")
				return
			}
			defer os.Remove(linuxPermsTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			linuxPermsTemplate, err := templates.GetManifest("linux-permissions.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}
			// Escrever o conte√∫do do template de Permiss√µes Linux no arquivo tempor√°rio
			if _, err := linuxPermsTempFile.WriteString(string(linuxPermsTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template de Permiss√µes Linux no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Permiss√µes Linux.")
				return
			}
			linuxPermsTempFile.Close()

			// Criar um arquivo tempor√°rio para o template de Gerenciamento de Containers Docker
			dockerContainersTempFile, err := os.CreateTemp("", "docker-containers-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template de Containers Docker: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Containers Docker.")
				return
			}
			defer os.Remove(dockerContainersTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			dockerContainersTemplate, err := templates.GetManifest("containers.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}

			// Escrever o conte√∫do do template de Containers Docker no arquivo tempor√°rio
			if _, err := dockerContainersTempFile.WriteString(string(dockerContainersTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template de Containers Docker no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Containers Docker.")
				return
			}
			dockerContainersTempFile.Close()

			// Criar um arquivo tempor√°rio para o template de Deployment Kubernetes
			k8sDeploymentTempFile, err := os.CreateTemp("", "k8s-deployment-*.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao criar arquivo tempor√°rio para o template de Deployment Kubernetes: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Deployment Kubernetes.")
				return
			}
			defer os.Remove(k8sDeploymentTempFile.Name()) // Limpar o arquivo tempor√°rio ao finalizar

			k8sDeploymentTemplate, err := templates.GetManifest("deployment.yaml")
			if err != nil {
				fmt.Fprintf(os.Stderr, "Erro ao carregar o template: %v\n", err)
				return
			}

			// Escrever o conte√∫do do template de Deployment Kubernetes no arquivo tempor√°rio
			if _, err := k8sDeploymentTempFile.WriteString(string(k8sDeploymentTemplate)); err != nil {
				fmt.Fprintf(os.Stderr, "‚ùå Erro ao escrever template de Deployment Kubernetes no arquivo tempor√°rio: %v\n", err)
				fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de Deployment Kubernetes.")
				return
			}
			k8sDeploymentTempFile.Close()

			// Aplicar o template de laborat√≥rio Linux
			if verboseMode {
				// Executar normalmente mostrando o output
				fmt.Println("   Aplicando template de laborat√≥rio Linux...")
				applyLabCmd := exec.Command("kubectl", "apply", "-f", labTempFile.Name())
				applyLabCmd.Stdout = os.Stdout
				applyLabCmd.Stderr = os.Stderr

				if err := applyLabCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de laborat√≥rio Linux: %v\n", err)
					fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Linux.")
				} else {
					fmt.Println("   ‚úÖ Template de laborat√≥rio Linux B√°sico aplicado com sucesso!")
				}

				// Aplicar o template de laborat√≥rio Kubernetes
				fmt.Println("   Aplicando template de laborat√≥rio Kubernetes...")
				applyK8sCmd := exec.Command("kubectl", "apply", "-f", k8sTempFile.Name())
				applyK8sCmd.Stdout = os.Stdout
				applyK8sCmd.Stderr = os.Stderr

				if err := applyK8sCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de laborat√≥rio Kubernetes: %v\n", err)
					fmt.Println("   A infraestrutura b√°sica e o template Linux foram aplicados, mas sem o template de laborat√≥rio Kubernetes.")
				} else {
					fmt.Println("   ‚úÖ Template de laborat√≥rio Fundamentos de Kubernetes aplicado com sucesso!")
				}

				// Aplicar o template de laborat√≥rio Docker
				fmt.Println("   Aplicando template de laborat√≥rio Docker...")
				applyDockerCmd := exec.Command("kubectl", "apply", "-f", dockerTempFile.Name())
				applyDockerCmd.Stdout = os.Stdout
				applyDockerCmd.Stderr = os.Stderr

				if err := applyDockerCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de laborat√≥rio Docker: %v\n", err)
					fmt.Println("   A infraestrutura b√°sica e os outros templates foram aplicados, mas sem o template de laborat√≥rio Docker.")
				} else {
					fmt.Println("   ‚úÖ Template de laborat√≥rio Fundamentos de Docker aplicado com sucesso!")
				}

				// Aplicar o template de Usu√°rios Linux
				fmt.Println("   Aplicando template de Administra√ß√£o de Usu√°rios Linux...")
				applyLinuxUsersCmd := exec.Command("kubectl", "apply", "-f", linuxUsersTempFile.Name())
				applyLinuxUsersCmd.Stdout = os.Stdout
				applyLinuxUsersCmd.Stderr = os.Stderr

				if err := applyLinuxUsersCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Usu√°rios Linux: %v\n", err)
				} else {
					fmt.Println("   ‚úÖ Template de Administra√ß√£o de Usu√°rios Linux aplicado com sucesso!")
				}

				// Aplicar o template de Permiss√µes Linux
				fmt.Println("   Aplicando template de Permiss√µes de Arquivos Linux...")
				applyLinuxPermsCmd := exec.Command("kubectl", "apply", "-f", linuxPermsTempFile.Name())
				applyLinuxPermsCmd.Stdout = os.Stdout
				applyLinuxPermsCmd.Stderr = os.Stderr

				if err := applyLinuxPermsCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Permiss√µes Linux: %v\n", err)
				} else {
					fmt.Println("   ‚úÖ Template de Permiss√µes de Arquivos Linux aplicado com sucesso!")
				}

				// Aplicar o template de Containers Docker
				fmt.Println("   Aplicando template de Gerenciamento de Containers Docker...")
				applyDockerContainersCmd := exec.Command("kubectl", "apply", "-f", dockerContainersTempFile.Name())
				applyDockerContainersCmd.Stdout = os.Stdout
				applyDockerContainersCmd.Stderr = os.Stderr

				if err := applyDockerContainersCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Containers Docker: %v\n", err)
				} else {
					fmt.Println("   ‚úÖ Template de Gerenciamento de Containers Docker aplicado com sucesso!")
				}

				// Aplicar o template de Deployment Kubernetes
				fmt.Println("   Aplicando template de Deployment Nginx Kubernetes...")
				applyK8sDeploymentCmd := exec.Command("kubectl", "apply", "-f", k8sDeploymentTempFile.Name())
				applyK8sDeploymentCmd.Stdout = os.Stdout
				applyK8sDeploymentCmd.Stderr = os.Stderr

				if err := applyK8sDeploymentCmd.Run(); err != nil {
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Deployment Kubernetes: %v\n", err)
				} else {
					fmt.Println("   ‚úÖ Template de Deployment Nginx Kubernetes aplicado com sucesso!")
				}
			} else {
				// Usar barra de progresso para os templates
				bar := progressbar.NewOptions(100,
					progressbar.OptionSetDescription("Aplicando templates de laborat√≥rio..."),
					progressbar.OptionSetWidth(80),
					progressbar.OptionShowBytes(false),
					progressbar.OptionSetPredictTime(false),
					progressbar.OptionThrottle(65*time.Millisecond),
					progressbar.OptionSetRenderBlankState(true),
					progressbar.OptionSpinnerType(14),
					progressbar.OptionFullWidth(),
				)

				// Executar comando para aplicar o template Linux
				applyLabCmd := exec.Command("kubectl", "apply", "-f", labTempFile.Name())
				var stderrLinux bytes.Buffer
				applyLabCmd.Stderr = &stderrLinux

				// Iniciar o comando
				err := applyLabCmd.Start()
				if err != nil {
					bar.Finish()
					fmt.Fprintf(os.Stderr, "‚ùå Erro ao iniciar aplica√ß√£o do template Linux: %v\n", err)
					fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem os templates de laborat√≥rio.")
				} else {
					// Atualizar a barra de progresso enquanto o comando est√° em execu√ß√£o
					done := make(chan struct{})
					go func() {
						for {
							select {
							case <-done:
								return
							default:
								bar.Add(1)
								time.Sleep(50 * time.Millisecond)
							}
						}
					}()

					// Aguardar o final do comando
					err = applyLabCmd.Wait()
					close(done)

					linuxSuccess := err == nil

					// Aplicar o template de Kubernetes
					applyK8sCmd := exec.Command("kubectl", "apply", "-f", k8sTempFile.Name())
					var stderrK8s bytes.Buffer
					applyK8sCmd.Stderr = &stderrK8s

					err = applyK8sCmd.Run()
					k8sSuccess := err == nil

					// Aplicar o template de Docker
					applyDockerCmd := exec.Command("kubectl", "apply", "-f", dockerTempFile.Name())
					var stderrDocker bytes.Buffer
					applyDockerCmd.Stderr = &stderrDocker

					err = applyDockerCmd.Run()
					dockerSuccess := err == nil

					// Aplicar os novos templates
					applyLinuxUsersCmd := exec.Command("kubectl", "apply", "-f", linuxUsersTempFile.Name())
					var stderrLinuxUsers bytes.Buffer
					applyLinuxUsersCmd.Stderr = &stderrLinuxUsers

					err = applyLinuxUsersCmd.Run()
					linuxUsersSuccess := err == nil

					applyLinuxPermsCmd := exec.Command("kubectl", "apply", "-f", linuxPermsTempFile.Name())
					var stderrLinuxPerms bytes.Buffer
					applyLinuxPermsCmd.Stderr = &stderrLinuxPerms

					err = applyLinuxPermsCmd.Run()
					linuxPermsSuccess := err == nil

					applyDockerContainersCmd := exec.Command("kubectl", "apply", "-f", dockerContainersTempFile.Name())
					var stderrDockerContainers bytes.Buffer
					applyDockerContainersCmd.Stderr = &stderrDockerContainers

					err = applyDockerContainersCmd.Run()
					dockerContainersSuccess := err == nil

					applyK8sDeploymentCmd := exec.Command("kubectl", "apply", "-f", k8sDeploymentTempFile.Name())
					var stderrK8sDeployment bytes.Buffer
					applyK8sDeploymentCmd.Stderr = &stderrK8sDeployment

					err = applyK8sDeploymentCmd.Run()
					k8sDeploymentSuccess := err == nil

					bar.Finish()

					if !linuxSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de laborat√≥rio Linux: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrLinux.String())
						fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Linux.")
					}

					if !k8sSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de laborat√≥rio Kubernetes: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrK8s.String())
						fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Kubernetes.")
					}

					if !dockerSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de laborat√≥rio Docker: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrDocker.String())
						fmt.Println("   A infraestrutura b√°sica foi aplicada, mas sem o template de laborat√≥rio Docker.")
					}

					if !linuxUsersSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Usu√°rios Linux: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrLinuxUsers.String())
					}

					if !linuxPermsSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Permiss√µes Linux: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrLinuxPerms.String())
					}

					if !dockerContainersSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Containers Docker: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrDockerContainers.String())
					}

					if !k8sDeploymentSuccess {
						fmt.Fprintf(os.Stderr, "‚ùå Erro ao aplicar o template de Deployment Kubernetes: %v\n", err)
						fmt.Println("   Detalhes t√©cnicos:", stderrK8sDeployment.String())
					}

					if linuxSuccess && k8sSuccess && dockerSuccess &&
						linuxUsersSuccess && linuxPermsSuccess &&
						dockerContainersSuccess && k8sDeploymentSuccess {
						fmt.Println("‚úÖ Todos os templates de laborat√≥rio aplicados com sucesso!")

						// Verifica√ß√£o de diagn√≥stico para confirmar que os templates est√£o vis√≠veis
						fmt.Println("\nüîç Verificando templates de laborat√≥rio instalados:")
						listLabsCmd := exec.Command("kubectl", "get", "configmap", "-n", "girus", "-l", "app=girus-lab-template", "-o", "custom-columns=NAME:.metadata.name")

						// Capturar output para apresent√°-lo de forma mais organizada
						var labsOutput bytes.Buffer
						listLabsCmd.Stdout = &labsOutput
						listLabsCmd.Stderr = &labsOutput

						if err := listLabsCmd.Run(); err == nil {
							labs := strings.Split(strings.TrimSpace(labsOutput.String()), "\n")
							if len(labs) > 1 { // Primeira linha √© o cabe√ßalho "NAME"
								fmt.Println("   Templates encontrados:")
								for i, lab := range labs {
									if i > 0 { // Pular o cabe√ßalho
										fmt.Printf("   ‚úÖ %s\n", strings.TrimSpace(lab))
									}
								}
							} else {
								fmt.Println("   ‚ö†Ô∏è Nenhum template de laborat√≥rio encontrado!")
							}
						} else {
							fmt.Println("   ‚ö†Ô∏è N√£o foi poss√≠vel verificar os templates instalados")
						}

						// Reiniciar o backend para carregar os templates
						fmt.Println("\nüîÑ Reiniciando o backend para carregar os templates...")
						restartCmd := exec.Command("kubectl", "rollout", "restart", "deployment/girus-backend", "-n", "girus")
						restartCmd.Run()

						// Aguardar o rein√≠cio completar
						fmt.Println("   Aguardando o rein√≠cio do backend completar...")
						waitCmd := exec.Command("kubectl", "rollout", "status", "deployment/girus-backend", "-n", "girus", "--timeout=60s")
						// Redirecionar sa√≠da para n√£o exibir detalhes do rollout
						var waitOutput bytes.Buffer
						waitCmd.Stdout = &waitOutput
						waitCmd.Stderr = &waitOutput

						// Iniciar indicador de progresso simples
						spinChars := []string{"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"}
						spinIdx := 0
						done := make(chan struct{})
						go func() {
							for {
								select {
								case <-done:
									return
								default:
									fmt.Printf("\r   %s Aguardando... ", spinChars[spinIdx])
									spinIdx = (spinIdx + 1) % len(spinChars)
									time.Sleep(100 * time.Millisecond)
								}
							}
						}()

						// Executar e aguardar
						waitCmd.Run()
						close(done)
						fmt.Println("\r   ‚úÖ Backend reiniciado com sucesso!            ")

						// Aguardar mais alguns segundos para o backend inicializar completamente
						fmt.Println("   Aguardando inicializa√ß√£o completa...")
						time.Sleep(5 * time.Second)

					} else if linuxSuccess {
						fmt.Println("‚úÖ Template de laborat√≥rio Linux aplicado com sucesso!")
					} else if k8sSuccess {
						fmt.Println("‚úÖ Template de laborat√≥rio Kubernetes aplicado com sucesso!")
					} else if dockerSuccess {
						fmt.Println("‚úÖ Template de laborat√≥rio Docker aplicado com sucesso!")
					}
				}
			}
		}

		// Aguardar os pods do Girus ficarem prontos
		if err := k8s.WaitForPodsReady("girus", 5*time.Minute); err != nil {
			fmt.Fprintf(os.Stderr, "Aviso: %v\n", err)
			fmt.Println("Recomenda-se verificar o estado dos pods com 'kubectl get pods -n girus'")
		} else {
			fmt.Println("Todos os componentes do Girus est√£o prontos e em execu√ß√£o!")
		}

		fmt.Println("Girus implantado com sucesso no cluster!")

		// Configurar port-forward automaticamente (a menos que --skip-port-forward tenha sido especificado)
		if !skipPortForward {
			fmt.Print("\nüîå Configurando acesso aos servi√ßos do Girus... ")

			if err := k8s.SetupPortForward("girus"); err != nil {
				fmt.Println("‚ö†Ô∏è")
				fmt.Printf("N√£o foi poss√≠vel configurar o acesso autom√°tico: %v\n", err)
				fmt.Println("\nVoc√™ pode tentar configurar manualmente com os comandos:")
				fmt.Println("kubectl port-forward -n girus svc/girus-backend 8080:8080 --address 0.0.0.0")
				fmt.Println("kubectl port-forward -n girus svc/girus-frontend 8000:80 --address 0.0.0.0")
			} else {
				fmt.Println("‚úÖ")
				fmt.Println("Acesso configurado com sucesso!")
				fmt.Println("üìä Backend: http://localhost:8080")
				fmt.Println("üñ•Ô∏è  Frontend: http://localhost:8000")

				// Abrir o navegador se n√£o foi especificado para pular
				if !skipBrowser {
					fmt.Println("\nüåê Abrindo navegador com o Girus...")
					if err := helpers.OpenBrowser("http://localhost:8000"); err != nil {
						fmt.Printf("‚ö†Ô∏è  N√£o foi poss√≠vel abrir o navegador: %v\n", err)
						fmt.Println("   Acesse manualmente: http://localhost:8000")
					}
				}
			}
		} else {
			fmt.Println("\n‚è© Port-forward ignorado conforme solicitado")
			fmt.Println("\nPara acessar o Girus posteriormente, execute:")
			fmt.Println("kubectl port-forward -n girus svc/girus-backend 8080:8080 --address 0.0.0.0")
			fmt.Println("kubectl port-forward -n girus svc/girus-frontend 8000:80 --address 0.0.0.0")
		}

		// Exibir mensagem de conclus√£o
		fmt.Println("\n" + strings.Repeat("‚îÄ", 60))
		fmt.Println("‚úÖ GIRUS PRONTO PARA USO!")
		fmt.Println(strings.Repeat("‚îÄ", 60))

		// Exibir acesso ao navegador como pr√≥ximo passo
		fmt.Println("üìã PR√ìXIMOS PASSOS:")
		fmt.Println("  ‚Ä¢ Acesse o Girus no navegador:")
		fmt.Println("    http://localhost:8000")

		// Instru√ß√µes para laborat√≥rios
		fmt.Println("\n  ‚Ä¢ Para aplicar mais templates de laborat√≥rios com o Girus:")
		fmt.Println("    girus create lab -f caminho/para/lab.yaml")

		fmt.Println("\n  ‚Ä¢ Para ver todos os laborat√≥rios dispon√≠veis:")
		fmt.Println("    girus list labs")

		fmt.Println(strings.Repeat("‚îÄ", 60))
	},
}

var createLabCmd = &cobra.Command{
	Use:   "lab [lab-id] ou -f [arquivo]",
	Short: "Cria um novo laborat√≥rio no Girus",
	Long:  "Adiciona um novo laborat√≥rio ao Girus a partir de um arquivo de manifesto ConfigMap, ou cria um ambiente de laborat√≥rio a partir de um ID de template existente.\nOs templates de laborat√≥rio s√£o armazenados no diret√≥rio /labs na raiz do projeto.",
	Run: func(cmd *cobra.Command, args []string) {
		// Verificar qual modo estamos
		if labFile != "" {
			// Modo de adicionar template a partir de arquivo
			lab.AddLabFromFile(labFile, verboseMode)
		} else {
			fmt.Fprintf(os.Stderr, "Erro: Voc√™ deve especificar um arquivo de laborat√≥rio com a flag -f\n")
			fmt.Println("\nExemplo:")
			fmt.Println("  girus create lab -f meulaboratorio.yaml      # Adiciona um novo template a partir do arquivo")
			fmt.Println("  girus create lab -f /home/user/REPOS/strigus/labs/basic-linux.yaml      # Adiciona um template do diret√≥rio /labs")
			os.Exit(1)
		}
	},
}

func init() {
	createCmd.AddCommand(createClusterCmd)
	createCmd.AddCommand(createLabCmd)

	// Flags para createClusterCmd
	createClusterCmd.Flags().StringVarP(&deployFile, "file", "f", "", "Arquivo YAML para deployment do Girus (opcional)")
	createClusterCmd.Flags().BoolVarP(&verboseMode, "verbose", "v", false, "Modo detalhado com output completo em vez da barra de progresso")
	createClusterCmd.Flags().BoolVarP(&skipPortForward, "skip-port-forward", "", false, "N√£o perguntar sobre configurar port-forwarding")
	createClusterCmd.Flags().BoolVarP(&skipBrowser, "skip-browser", "", false, "N√£o abrir o navegador automaticamente")

	// Flags para createLabCmd
	createLabCmd.Flags().StringVarP(&labFile, "file", "f", "", "Arquivo de manifesto do laborat√≥rio (ConfigMap)")
	createLabCmd.Flags().BoolVarP(&verboseMode, "verbose", "v", false, "Modo detalhado com output completo em vez da barra de progresso")

	// definir o nome do cluster como "girus" sempre
	clusterName = "girus"
}
