apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-configmaps-secrets-lab
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: kubernetes-configmaps-secrets
    title: "Gerenciando Configurações e Segredos no Kubernetes"
    description: "Use ConfigMaps para injetar configurações e Secrets para dados sensíveis (como senhas e chaves de API) em Pods."
    duration: 30m
    image: "linuxtips/girus-kind-single-node:0.1"
    tasks:
      - name: "Trabalhando com ConfigMaps"
        description: "Crie ConfigMaps e use seus dados como variáveis de ambiente em um Pod."
        steps:
          - "Crie um namespace:"
          - "`kubectl create namespace config-lab`"
          - "Crie um ConfigMap com dados literais:"
          - "`kubectl create configmap app-config --from-literal=BACKGROUND_COLOR=blue --from-literal=LOG_LEVEL=info -n config-lab`"
          - "Visualize o ConfigMap criado:"
          - "`kubectl get configmap app-config -n config-lab -o yaml`"
          - "Crie um arquivo 'pod-configmap-env.yaml' com a definição de um Pod que usa o ConfigMap como variáveis de ambiente:"
          - |
            ```
            # pod-configmap-env.yaml
            apiVersion: v1
            kind: Pod
            metadata:
              name: pod-cm-env
            spec:
              containers:
              - name: main-app
                image: busybox:1.28
                command: ["/bin/sh", "-c", "echo 'Variáveis de ambiente recebidas:'; env | grep BACKGROUND_COLOR; env | grep LOG_LEVEL; sleep 3600"]
                envFrom:
                - configMapRef:
                    name: app-config # Nome do ConfigMap
              restartPolicy: Never
            ```
          - "Aplique o YAML para criar o Pod:"
          - "`kubectl apply -f pod-configmap-env.yaml -n config-lab`"
          - "Aguarde o Pod ficar pronto:"
          - "`kubectl wait --for=condition=Ready pod/pod-cm-env -n config-lab --timeout=60s`"
          - "Verifique os logs do Pod para ver as variáveis de ambiente:"
          - "`kubectl logs pod-cm-env -n config-lab`"
        tips:
          - type: "info"
            title: "Formas de usar ConfigMaps"
            content: "Você pode usar dados de ConfigMaps como: variáveis de ambiente (individuais ou todas as chaves), argumentos de comando, ou montados como arquivos em um volume."
        validation:
          - command: "kubectl logs pod-cm-env -n config-lab | grep 'LOG_LEVEL=info'"
            expectedOutput: "LOG_LEVEL=info"
            errorMessage: "O Pod não parece ter recebido a variável de ambiente LOG_LEVEL do ConfigMap."

      - name: "Trabalhando com Secrets"
        description: "Crie Secrets e monte seus dados como arquivos em um Pod."
        steps:
          - "Crie um Secret com dados literais (ex: senha, chave de API):"
          - "`kubectl create secret generic db-credentials --from-literal=username=admin --from-literal=password='s3cr3tP@sswOrd' -n config-lab`"
          - "Visualize o Secret (os dados estarão codificados em Base64):"
          - "`kubectl get secret db-credentials -n config-lab -o yaml`"
          - "Decodifique um dos valores (ex: password):"
          - "`kubectl get secret db-credentials -n config-lab -o jsonpath='{.data.password}' | base64 --decode`"
          - "Crie um arquivo 'pod-secret-volume.yaml' com a definição de um Pod que monta o Secret como um volume:"
          - |
            ```
            # pod-secret-volume.yaml
            apiVersion: v1
            kind: Pod
            metadata:
              name: pod-secret-vol
            spec:
              containers:
              - name: main-app
                image: busybox:1.28
                command: ["/bin/sh", "-c", "echo 'Conteúdo do Secret montado:'; ls -l /etc/secret-data; echo 'Username:'; cat /etc/secret-data/username; echo '\\nPassword:'; cat /etc/secret-data/password; sleep 3600"]
                volumeMounts:
                - name: secret-volume
                  mountPath: /etc/secret-data # Diretório onde o secret será montado
                  readOnly: true
              volumes:
              - name: secret-volume
                secret:
                  secretName: db-credentials # Nome do Secret
              restartPolicy: Never
            ```
          - "Aplique o YAML para criar o Pod:"
          - "`kubectl apply -f pod-secret-volume.yaml -n config-lab`"
          - "Aguarde o Pod ficar pronto:"
          - "`kubectl wait --for=condition=Ready pod/pod-secret-vol -n config-lab --timeout=60s`"
          - "Verifique os logs do Pod para ver o conteúdo do Secret montado:"
          - "`kubectl logs pod-secret-vol -n config-lab`"
        tips:
          - type: "warning"
            title: "Secrets não são Criptografados por Padrão"
            content: "Os dados em Secrets são apenas codificados em Base64, não criptografados por padrão no etcd. Qualquer pessoa com acesso à API do K8s pode ler os Secrets. Considere soluções como Sealed Secrets ou Vault para maior segurança."
        validation:
          - command: "kubectl logs pod-secret-vol -n config-lab | grep 'Password:' | wc -l" # Verifica apenas se a linha 'Password:' existe
            expectedOutput: "1"
            errorMessage: "O Pod não parece ter montado ou lido o conteúdo do Secret corretamente."

      - name: "Limpeza Final"
        description: "Remova todos os recursos criados no laboratório."
        steps:
          - "Exclua os Pods, ConfigMap e Secret (ou apenas o namespace):"
          - "`kubectl delete namespace config-lab`"
          - "Verifique a exclusão:"
          - "`kubectl get namespace config-lab || echo 'Namespace removido'`"
          - "Limpe os arquivos YAML criados localmente:"
          - "`rm -f pod-configmap-env.yaml pod-secret-volume.yaml`"
        validation:
          - command: "kubectl get namespace config-lab &> /dev/null || echo 'Namespace removido'"
            expectedOutput: "Namespace removido"
            errorMessage: "O namespace 'config-lab' não foi removido corretamente." 