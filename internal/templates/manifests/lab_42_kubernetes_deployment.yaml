apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-deployment-lab
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: kubernetes-deployment
    title: "Criando um Deployment no Kubernetes"
    description: "Aprenda a criar um deployment do Nginx e verificar os detalhes dos pods no Kubernetes"
    duration: 15m
    timerEnabled: true
    maxDuration: 15m
    image: "linuxtips/girus-kind-single-node:0.1"
    youtubeVideo: "https://www.youtube.com/watch?v=sU235yW6QJM"
    tasks:
      - name: "Criando um Deployment do Nginx"
        description: "Aprenda a criar um deployment do Nginx usando kubectl"
        steps:
          - "Verifique se o cluster Kubernetes está em execução:"
          - "`kubectl get nodes`"
          - "Crie um namespace para o exercício:"
          - "`kubectl create namespace nginx-example`"
          - "Crie um deployment do Nginx de forma imperativa:"
          - "`kubectl create deployment nginx-deployment --image=nginx:latest --replicas=2 -n nginx-example`"
          - "Verifique se o deployment foi criado:"
          - "`kubectl get deployments -n nginx-example`"
          - "Verifique o status da implantação:"
          - "`kubectl rollout status deployment/nginx-deployment -n nginx-example`"
          - "Agora, vamos criar outro deployment usando um arquivo YAML:"
          - "Crie um arquivo deployment.yaml:"
          - |
            ```
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: nginx-declarative
              namespace: nginx-example
              labels:
                app: nginx-declarative
            spec:
              replicas: 3
              selector:
                matchLabels:
                  app: nginx-declarative
              template:
                metadata:
                  labels:
                    app: nginx-declarative
                spec:
                  containers:
                  - name: nginx
                    image: nginx:latest
                    ports:
                    - containerPort: 80
            ```
          - "Aplique o arquivo YAML:"
          - "`kubectl apply -f deployment.yaml`"
          - "Verifique os deployments criados:"
          - "`kubectl get deployments -n nginx-example`"
          - "Verifique os pods criados:"
          - "`kubectl get pods -n nginx-example`"
        tips:
          - type: "info"
            title: "Deployment vs Pod"
            content: "Um Deployment é um recurso de nível superior que gerencia um conjunto de Pods. Ele garante que um número específico de réplicas esteja sempre em execução."
          - type: "tip"
            title: "Formas de criar recursos"
            content: "Você pode criar recursos Kubernetes de forma imperativa (usando comandos como kubectl create) ou declarativa (usando arquivos YAML com kubectl apply)."
        validation:
          - command: "kubectl get deployment nginx-deployment -n nginx-example -o jsonpath='{.spec.replicas}' 2>/dev/null || echo ''"
            expectedOutput: "2"
            errorMessage: "O deployment nginx-deployment não foi criado corretamente"
      
      - name: "Gerenciando o Deployment"
        description: "Aprenda a escalar, atualizar e excluir deployments"
        steps:
          - "Escale o deployment para 4 réplicas:"
          - "`kubectl scale deployment nginx-deployment --replicas=4 -n nginx-example`"
          - "Verifique o número de pods:"
          - "`kubectl get pods -n nginx-example`"
          - "Atualize a imagem do deployment:"
          - "`kubectl set image deployment/nginx-deployment nginx=nginx:1.19 -n nginx-example`"
          - "Verifique o status da atualização:"
          - "`kubectl rollout status deployment/nginx-deployment -n nginx-example`"
          - "Veja o histórico de atualizações:"
          - "`kubectl rollout history deployment/nginx-deployment -n nginx-example`"
          - "Desfaça a última atualização:"
          - "`kubectl rollout undo deployment/nginx-deployment -n nginx-example`"
          - "Verifique o status após o rollback:"
          - "`kubectl rollout status deployment/nginx-deployment -n nginx-example`"
          - "Exclua o deployment:"
          - "`kubectl delete deployment nginx-deployment -n nginx-example`"
          - "Verifique se o deployment foi excluído:"
          - "`kubectl get deployments -n nginx-example`"
        tips:
          - type: "info"
            title: "Rollouts e Rollbacks"
            content: "O Kubernetes gerencia atualizações de forma gradual, substituindo pods um por um. Se algo der errado, você pode fazer um rollback para a versão anterior."
          - type: "warning"
            title: "Exclusão de recursos"
            content: "Ao excluir um deployment, todos os pods gerenciados por ele também serão excluídos. Use --cascade=false para preservar os pods."
        validation:
          - command: "kubectl get deployment nginx-deployment -n nginx-example 2>/dev/null || echo 'deleted'"
            expectedOutput: "deleted"
            errorMessage: "O deployment nginx-deployment não foi excluído corretamente"
